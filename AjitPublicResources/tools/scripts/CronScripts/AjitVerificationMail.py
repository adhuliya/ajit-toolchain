#!/usr/bin/env python

# The script to generate the mail contents of AjitVerification script
# Analyzes the log files generated by the validation script

# Written by Titto Thomas


import os
import sys
import time
import os.path

def main ():

	ret = 0

	if(len(sys.argv) < 2):
		print "Error: Shell script didn't pass arguments"

	# get the return values
	c_exists = os.path.exists('validation.job.C.log.txt') 
	a_exists = os.path.exists('validation.job.Aa.log.txt') 
	
	# file to store the email body
	message_body = sys.argv[1]
	
	# create the text file with necesary info
	mail_content =  open (message_body, 'w')
	mail_content.write("Ajit processor verification : " + str(time.strftime("%d-%m-%Y")) + "\n")
	mail_content.write("--------------------------------------------------------\n")
	
	# Calculate necessary information for the mail
	mail_content.write("C Model :\n")
	# parse the C model job logfile
	if (c_exists == True):
		with open('validation.job.C.log.txt') as openfile:
			first_line = True
			failed_cases = 0
			total_time = 0
			total_cases = 0
			failed_list = []
			for line in openfile:
				if (first_line):
					first_line = False
				else:
					total_cases = total_cases + 1
					temp = line.split("	")
					# 0-success
					if (int(temp[6]) != 0):
						failed_cases = failed_cases + 1
						failed_list.append(str(temp[8]))
					total_time = total_time + float(temp[3])
					
		mail_content.write("Total test cases - " + str(total_cases) + "\n")
		mail_content.write("Successful tests - " + str(total_cases-failed_cases) + "\n")
		mail_content.write("Failed tests - " + str(failed_cases) + "\n")
		for cases in failed_list:
			current = cases.split()
			mail_content.write(current[3] + "\n")
		mail_content.write("Execution time - " + str(total_time) + " s\n")
		
	else:
		mail_content.write("Verification failed !\n")
	
	mail_content.write("\n")
	
	# parse the Aa model job logfile
	mail_content.write("Aa Model :\n")
	
	if (a_exists == True):
		with open('validation.job.Aa.log.txt') as openfile:
			first_line = True
			failed_cases = 0
			total_time = 0
			total_cases = 0
			failed_list[:] = []
			for line in openfile:
				if (first_line):
					first_line = False
				else:
					total_cases = total_cases + 1
					temp = line.split("	")
					# 0-success
					if (int(temp[6]) != 0):
						failed_cases = failed_cases + 1
						failed_list.append(str(temp[8]))
					total_time = total_time + float(temp[3])
					
		mail_content.write("Total test cases - " + str(total_cases) + "\n")
		mail_content.write("Successful tests - " + str(total_cases-failed_cases) + "\n")
		mail_content.write("Failed tests - " + str(failed_cases) + "\n")
		for cases in failed_list:
			current = cases.split()
			mail_content.write(current[3] + "\n")
		mail_content.write("Execution time - " + str(total_time) + " s\n")
	else:
		mail_content.write("Verification failed !\n")
	
	# close the file and return
	mail_content.close()
	ret = int(c_exists | a_exists)
	return ret
	
if __name__ == '__main__':

	ret = main()
	sys.exit(ret)
