	    Preparing a FLASH image
		Madhav Desai


1. Overview
	We describe the procedure to be used
	in order to prepare a FLASH image for
	booting an application.


2. Assumptions

	FLASH memory is mapped to physical address range
	0x0 to 0x3fffffff

	SRAM is mapped to physical address range
	0x40000000  to 0xfffeffff

	Physical devices are mapped to address range
	0xffff0000 to 0xffffffff


3. Procedure: compile the application

	We first compile and link the application you want
	to boot.   For the assumptions shown above, the
	linker script to be used is

	ENTRY(_start)
	__DYNAMIC = 0;
	SECTIONS
	{
		. = 0x00000000;
		.text ALIGN(8) : { 
			KEEP(*(.text.ajitstart))
    			*(.text)
    			*(.text.*)
    			KEEP(*(.text.pagetablesetup))
    			KEEP(*(.text.traphandlers))
    			KEEP(*(.text.traptablebase))
		}
		. = 0x00020000;
		.rodata ALIGN(8) : { *(.rodata) *(.rodata.*) }
		.data ALIGN(8)   : { *(.data) *(.data.*) *(.bss) }
	}

	We may use a vmap file for the compilation.

	! I cacheable.
	0x0 0x40000000 0x40000000 0x2  0x1 0x3
	! D cacheable.  
	0x0 0x80000000 0x40020000 0x2  0x1 0x3
	! Stack cacheable..
	0x0 0xfffff000 0x400ff000 0x3  0x1 0x3

	The compilation produces an .mmap.remapped file.

4.  Prepare the boot image:
	The mmapToAssy program in the ../bin/ directory
	needs to be used.

	mmapToAssy rpn.mmap.remapped rpn_assy.s

	This produces an assembly program which writes
	the application code image starting at address 0x40000000

	The rpn_assy.s file is linked with a bootstrap bootstrap.s
	file (in directory ../asm).


	.section .text.ajitstart
	.global _start;
	_start:
		set -256, %sp
		clr %fp
	
		set 0x1, %l0		! window 0 is marked invalid...  we start at window 7
		wr %l0, 0x0, %wim	!
	
		! enable traps.
		set 0x10E7, %l0	
		wr %l0, %psr
	
		! copy to sram..
		call copy_program_image
		nop
	
		! jump to code.
		call 0x40000000
		nop
	
		ta 0

	!
	! This is a small subroutine which copies
	! memory bytes from one region to another.
	!
	! g3 contains starting source address, g4 contains
	! number of bytes (must be > 0) to be copied,
	! g5 contains the starting destination addres.
	!
	.global _copy_segment;
	_copy_segment:
        	ldub [%g3], %l3
		stub %l3, [%g5]
		add  %g3,1, %g3
		add  %g5,1, %g5
        	subcc %g4, 1, %g4
        	bnz _copy_segment
        	nop
        	retl 
        	nop
	

	After linking the assy.s and bootstrap.s for the bootstrap
	side, we get an mmap file.  This needs to be written into
	the flash memory.

