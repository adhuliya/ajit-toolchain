import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})
Import('COMPILATION_FLAGS')


AHIR_RELEASE=os.environ['AHIR_RELEASE']
env.Append(CPPPATH = './src/:./include:')
env.Append(CPPPATH = '../common/include:')

#AHIR-related
PIPE_HANDLER_INCLUDE=AHIR_RELEASE + "/include"
PIPE_HANDLER_LIBPATH = AHIR_RELEASE + "/lib"
PTHREAD_UTILS = AHIR_RELEASE + "/include"
GNU_PTH_UTILS = AHIR_RELEASE + "/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
env.Append(CPPPATH = PIPE_HANDLER_INCLUDE + ":" + PTHREAD_UTILS + ":" + GNU_PTH_UTILS + ":")


# create a library for memory :
#env.SharedLibrary('./lib/libMemory', Glob('src/*.c'), CCFLAGS=COMPILATION_FLAGS)
env.Library('./lib/libMemory', Glob('src/*.c'), CCFLAGS=COMPILATION_FLAGS)


# Uncomment this to create an executable of a testbench
# for the memory module :
#env.Program('./testbench/MemoryTestbench', source = Glob('testbench/*.c'), LIBS=['pthread', 'Memory'], LIBPATH='./lib/', CCFLAGS=COMPILATION_FLAGS, LINKFLAGS="--static")

