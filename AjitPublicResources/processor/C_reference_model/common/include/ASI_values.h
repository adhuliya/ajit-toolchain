//ASI_values.h
//
//Sparc V8 asi assignments
//Ref. Appendix I in Sparc V8 Architectural Reference Manual

#ifndef _ASI_VALUES_H_
#define _ASI_VALUES_H_


#define ASI_MMU_FLUSH_PROBE		0x03
#define ASI_MMU_REGISTER		0x04
#define ASI_MMU_DIAGNOSTIC_I		0x05
#define ASI_MMU_DIAGNOSTIC_I_D		0x06
#define ASI_MMU_DIAGNOSTIC_IO		0x07

#define ASI_USER_INSTRUCTION		0x08
#define ASI_SUPERVISOR_INSTRUCTION	0x09
#define ASI_USER_DATA			0x0A
#define ASI_SUPERVISOR_DATA		0x0B

#define ASI_CACHE_TAG_I			0x0C
#define ASI_CACHE_DATA_I		0x0D
#define ASI_CACHE_TAG_I_D		0x0E
#define ASI_CACHE_DATA_I_D		0x0F

#define ASI_FLUSH_I_D_PAGE		0x10
#define ASI_FLUSH_I_D_SEGMENT		0x11
#define ASI_FLUSH_I_D_REGION		0x12
#define ASI_FLUSH_I_D_CONTEXT		0x13
#define ASI_FLUSH_I_D_USER		0x14

#define ASI_BLOCK_COPY			0x17

#define ASI_FLUSH_I_PAGE		0x18
#define ASI_FLUSH_I_SEGMENT		0x19
#define ASI_FLUSH_I_REGION		0x1A
#define ASI_FLUSH_I_CONTEXT		0x1B
#define ASI_FLUSH_I_USER		0x1C

#define ASI_BLOCK_FILL			0x1F

#define ASI_MMU_PASS_THROUGH(asi)	((asi>=0x20) &&(asi<=0x2F))




#define ASI_ICACHE_FLUSH(asi)		((asi>=0x18) && (asi<=0x1C))
#define ASI_DCACHE_FLUSH(asi)		((asi>=0x10) && (asi<=0x14))
#define ASI_CACHE_TAG_DATA(asi)         ((asi>=0x0C) && (asi<=0x0F))


//all ASIs in the range 0x20 to 0x2F are 
//MMU physical address pass-through
#define ASI_reserved(asi)		((asi==0x00)||(asi==0x15)||(asi==0x16)||(asi==0x1D)||(asi==0x1E)||( (asi>=0x80)&&(asi<=0xFF)))
#define ASI_unassigned(asi)		((asi==0x01)||(asi==0x02)||( (asi>=0x30)&&(asi<=0x7F)))

#define ASI_MMU_ACCESS(asi) ((asi==ASI_MMU_FLUSH_PROBE) || (asi==ASI_MMU_REGISTER)\
		   				||( asi==ASI_MMU_DIAGNOSTIC_I)\
		   				||( asi==ASI_MMU_DIAGNOSTIC_I_D)\
		   				||( asi==ASI_MMU_DIAGNOSTIC_IO))

// legal asi values for dcache.
//  (note: 0x8, 0x9 are also allowed since an instruction can store to these spaces.)
#define ASI_DCACHE_VALID(asi)  ((asi == 0x8) || (asi == 0x9) || (asi == 0xa) || (asi == 0xb) || ASI_MMU_ACCESS(asi) ||\
					ASI_MMU_PASS_THROUGH(asi) || ASI_DCACHE_FLUSH(asi))

//
// legal asi values for icache.
//   (note: only 0x8,0x9, and icache-flush asi's are generated by the cpu.)
#define ASI_ICACHE_VALID(asi)  ((asi == 0x8) || (asi == 0x9) ||  ASI_ICACHE_FLUSH(asi))

#define ASI_USER_OR_SUPV_ACCESS(asi)  ((asi==0x8) || (asi==0x9) || (asi==0xA) || (asi==0xB))


#endif
