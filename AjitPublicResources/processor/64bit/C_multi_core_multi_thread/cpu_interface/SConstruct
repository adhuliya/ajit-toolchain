import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})
COMPILATION_FLAGS= ' -g '

AHIR_RELEASE=os.environ['AHIR_RELEASE']
env.Append(CPPPATH = './src/:./include:../common/include:')


AHIR_RELEASE=os.environ['AHIR_RELEASE']
AJIT_HOME=os.environ['AJIT_PROJECT_HOME']
AJIT_C_REF_MODEL=os.environ['AJIT_C_REF_MODEL']
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/common/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/cache/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/mmu/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/cpu/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/debugger/hwServer/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/monitorLogger/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/rlut/include:" )
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/tlbs/include:" )



#AHIR-related
PIPE_HANDLER_INCLUDE=AHIR_RELEASE + "/include"
PIPE_HANDLER_LIBPATH = AHIR_RELEASE + "/lib"
PTHREAD_UTILS = AHIR_RELEASE + "/include"
GNU_PTH_UTILS = AHIR_RELEASE + "/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
FUNCTIONLIB_INCLUDE=AHIR_RELEASE + "/functionLibrary/include"
env.Append(CPPPATH = FUNCTIONLIB_INCLUDE + ":" + PIPE_HANDLER_INCLUDE + ":" + PTHREAD_UTILS + ":" + GNU_PTH_UTILS + ":" + "./include:")



# create a library for the cpu_interface
#env.SharedLibrary('./lib/libThreadInterface', Glob('src/*.c'), CCFLAGS=COMPILATION_FLAGS)
env.Library('./lib/libCpuInterface', Glob('src/*.c'), CCFLAGS=COMPILATION_FLAGS)


