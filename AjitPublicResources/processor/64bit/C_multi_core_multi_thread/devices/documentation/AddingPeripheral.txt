
 The -B <bridge-targets-file> has been recently added.  The bridge targets file 
	lists the memory bus targets which consist of either memory (mem) or 
	peripherals.

	The default bridge targets file for the AJIT C model is the following

	! mem is named lowermem, address range 0x0 to 0xffff2fff
	! ram format:  ram <ram-name> <min-addr> <max-addr> <permissions (rw)>
	ram lowermem 0x0 0xffff2fff  0x3	
	! peripheral format:  peripheral <periph-name> <min-addr> <max-addr> 
	peripheral irc   0xffff3000 0xffff3008  
	peripheral timer 0xffff3100 0xffff3108  
	peripheral serial 0xffff3200 0xffff32ff  
	ram uppermem 0xffff3300 0xffffffff 0x3

	To add a new peripheral, you will need to either modify the
	testbench or write a bridge targets file which is then supplied
	to the testbench using the -B option.
	

	For adding a peripheral look at the document "AddingPeripheral.txt"
	in ../devices/docs


 To add a peripheral, let us say the SD host controller (sdhc), we would do
 the following

	Let us say that the memory addresses allocated to the sdhc are
	0xffff3300 to 0xffff3400  


 To add a peripheral, let us say the SD host controller (sdhc), we would do
 the following

	1. Let us say that the memory addresses allocated to the sdhc are
	   0xffff3300 to 0xffff33ff  
        2. Modify the bridge-targets information in the testbench code
		OR

	   Write a new bridge-targets description file.. for example

		! mem is named lowermem, address range 0x0 to 0xffff2fff
		! ram format:  ram <ram-name> <min-addr> <max-addr> <permissions (rw)>
		ram lowermem 0x0 0xffff2fff  0x3	
		! peripheral format:  peripheral <periph-name> <min-addr> <max-addr> 
		peripheral irc   0xffff3000 0xffff3008  
		peripheral timer 0xffff3100 0xffff3108  
		peripheral serial 0xffff3200 0xffff32ff  
		! added
		peripheral sdhc   0xffff3300 0xffff33ff  
		! changed from above.
		ram uppermem 0xffff3400 0xffffffff 0x3

	3. Now in the device src/ area create an sdhc.c file with
	   the following Daemon

		void sdhc_daemon()
		{
			// register the request response pipes.
			register_pipe("peripheral_bridge_to_sdhc_request", 1,  64, 0);
			register_pipe("sdhc_to_peripheral_bridge_response", 1, 32, 0);

			while(1)
			{
				uint8_t rwbar, byte_mask;
				uint32_t addr, data_in;

				// This returns the following information
				//   rwbar (read-write-bar 0 for write, 1 for read)
				//   byte_mask (4-bit byte-mask,  most significant byte select at left end.
				//   addr      24 bit address (NOTE: when you compare internally, use only
				//             the bottom 24-bits for comparison.
				//   data_in    incoming word to be written (using byte_mask).
				//
				getPeripheralAccessCommand("peripheral_bridge_to_sdhc_request",
									&rwbar, &byte_mask, &addr, &data_in);

				// use the request information for access to registers and internal
				// actions.
				if(rwbar) 
				{
					// NOTE: 24-bit address comparison.
					if (addr == (0xffffff & ADDRESS_OF_SOME_REG) 
					{
						// ... do something..
					}
				} else
				{
				}

				
				// calculate response 
				uint32_t data_out = ...


				sendPeripheralResponse("sdhc_to_peripheral_bridge_response", data_out);
			}
		}

		You may of course have additional threads in your sdhc model, but the one shown
		above is the basic loop.
