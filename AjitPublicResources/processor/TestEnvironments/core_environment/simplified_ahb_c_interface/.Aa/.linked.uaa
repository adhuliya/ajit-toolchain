$storage  default_mem_pool : $array[1] $of $uint<8> // memory space index = 0  base address = 0  word size = 8
// can point into 

$module [mem_load__] 
$in (address : $uint<32 > ) 
$out (data : $uint<8 > ) 
 $is {
 data := 
default_mem_pool[ ((address * 1 ) + 0) ]
}
$module [mem_store__] 
$in (address : $uint<32 > data : $uint<8 > ) 
 $out ()
 $is {
default_mem_pool[ ((address * 1 ) + 0) ] :=  data }
$pipe  AFB_TO_AHB_COMMAND : $uint<73>  $depth 2  $p2p 
// can point into 

$pipe  AHB_TO_AFB_RESPONSE : $uint<33>  $depth 2  $p2p 
// can point into  default_mem_pool

$module [get_simplified_ahb_command]
	 $in ()
	 $out ( rw : $uint<8>   transfer_size : $uint<8>   byte_address : $uint<64>   write_data : $uint<32>  )
$is
{
	command := AFB_TO_AHB_COMMAND
	lock_bus_1 := ( $slice command 72 72 ) 
	rw_1 := ( $slice command 71 71 ) 
	transfer_size_1 := ( $slice command 70 68 ) 
	addr_36 := ( $slice command 67 32 ) 
	write_data := ( $slice command 31 0 ) 
	rw := ($bitcast ($uint<8>) rw_1 )
	transfer_size := ($bitcast ($uint<8>) transfer_size_1 )
	byte_address := ($bitcast ($uint<64>) addr_36 )
}
$module [global_storage_initializer_]
	 $in ()
	 $out ()
$is
{
	$null
}
$module [send_simplified_ahb_response]
	 $in ( err : $uint<8>   read_data : $uint<32>  )
	 $out ()
$is
{
	to_pipe := (( $mux (err != 0 ) ($bitcast ($uint<1>) 1  )  0  )  && read_data)
	AHB_TO_AFB_RESPONSE := to_pipe
}
// Memory space 0: default_mem_pool 
