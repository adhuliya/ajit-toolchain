import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})
Import('COMPILATION_FLAGS')
Import('DEBUG_COMPILATION_FLAGS')

DEBUG_COMPILATION_FLAGS = DEBUG_COMPILATION_FLAGS + " -Wno-unused-variable -Wno-unused-function"
AJIT_HOME=os.environ['AJIT_PROJECT_HOME']
AJIT_C_REF_MODEL=os.environ['AJIT_C_REF_MODEL']

antlr_lib_filename=AJIT_HOME + "/tools/antlr3Cruntime/build/lib/libantlr3c.a"
#Build Parser, Lexer source files
if not env.GetOption('clean'):
   SConscript(['grammar/SConscript'])


AHIR_RELEASE=os.environ['AHIR_RELEASE']
env.Append(CPPPATH = './src/:./include:' + AJIT_HOME + '/tools/antlr3Cruntime/build/include:')
env.Append(CPPPATH = '../spi_common/src:../spi_common/include:')


env.Append(CPPPATH = AJIT_C_REF_MODEL + "/cpu/src:" + AJIT_C_REF_MODEL + "/cpu/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/common/src:" + AJIT_C_REF_MODEL + "/common/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/mmu/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/cache/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/debugger/hwServer/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/monitorLogger/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/rlut/include:")
env.Append(CPPPATH = AJIT_C_REF_MODEL + "/tlbs/include:")

#AHIR-related
PIPE_HANDLER_INCLUDE=AHIR_RELEASE + "/include"
PIPE_HANDLER_LIBPATH = AHIR_RELEASE + "/lib"
PTHREAD_UTILS = AHIR_RELEASE + "/include"
GNU_PTH_UTILS = AHIR_RELEASE + "/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
env.Append(CPPPATH = PIPE_HANDLER_INCLUDE + ":" + PTHREAD_UTILS + ":" + GNU_PTH_UTILS + ":" + "./include:")

#Create hwServer library
#env.SharedLibrary('./lib/libdoval', Glob('src/*.c'), CCFLAGS=DEBUG_COMPILATION_FLAGS)
env.Library('./lib/libdoval', Glob('src/*.c'), CCFLAGS=DEBUG_COMPILATION_FLAGS)
