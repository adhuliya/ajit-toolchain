import os
import sys
env = Environment(ENV = {'PATH' : os.environ['PATH']})



#AHIR-related
AHIR_RELEASE=os.environ['AHIR_RELEASE']
AHIR_INCLUDE=AHIR_RELEASE+"/include"
AHIR_LIBPATH=AHIR_RELEASE + "/lib"
FUNCTIONLIB_INCLUDE = AHIR_RELEASE + "/functionLibrary/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
AJIT_HOME=os.environ['AJIT_PROJECT_HOME']
AA_HOME=AJIT_HOME + "/processor/Aa_v3"
C_HOME=AJIT_HOME + "/processor/C"
DOVAL_HOME=C_HOME+"/debugger/doval/lib"
ANTLR_PATH = C_HOME +  "/debugger/doval/antlr3Cruntime/build/lib"


env.Append(CPPPATH = AJIT_HOME + '/os/kernels/pico/include:')
DEBUG_UTILS_INCLUDE=AJIT_HOME + '/processor/TestEnvironments/debug_utils/include'
DEBUG_UTILS_LIB=AJIT_HOME + '/processor/TestEnvironments/debug_utils/lib'
env.Append(CPPPATH = DEBUG_UTILS_INCLUDE + ":")

RIFFA_INCLUDE = AJIT_HOME + "processor/FPGA/riffa/riffa_2.2.0/source/driver/linux"
RIFFA_LIB = "/usr/local/lib" # riffa is assumed to be installed in /usr/local/lib
env.Append(CPPPATH = RIFFA_INCLUDE + ":")

#library for modeling the cpu environment.
CORE_INCLUDE = AA_HOME + '/sys/chip/core/aa2c'
C_CPU_INCLUDE = AJIT_HOME + '/processor/C/cpu/include'
MONITOR_LOGGER_INCLUDE = AJIT_HOME + '/processor/C/monitorLogger/include'
MONITOR_LOGGER_LIB = AJIT_HOME + '/processor/C/monitorLogger/lib'
CONSOLE_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/console/lib"
CONSOLE_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/console/include"
BOOTMEM_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/bootmem/lib"
BOOTMEM_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/bootmem/include"
SYSMEM_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/sys_mem/lib"
SYSMEM_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/sys_mem/include"
MEMARRAY_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/mem_array/lib"
MEMARRAY_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/mem_array/include"
AGGREGATOR_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/aggregator_simplified/lib"
AGGREGATOR_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/aggregator_simplified/include"
PROC_LINK_LIB=AJIT_HOME+"/processor/TestEnvironments/core_environment/processor_link/lib"
PROC_LINK_INCLUDE=AJIT_HOME+"/processor/TestEnvironments/core_environment/processor_link/include"
env.Append(CPPPATH = AHIR_INCLUDE + ":")
env.Append(CPPPATH = C_CPU_INCLUDE + ":")
env.Append(CPPPATH = CORE_INCLUDE + ":")
env.Append(CPPPATH = MONITOR_LOGGER_INCLUDE + ":")
env.Append(CPPPATH = CONSOLE_INCLUDE + ":")
env.Append(CPPPATH = BOOTMEM_INCLUDE + ":")
env.Append(CPPPATH = MEMARRAY_INCLUDE + ":")
env.Append(CPPPATH = SYSMEM_INCLUDE + ":")
env.Append(CPPPATH = AGGREGATOR_INCLUDE + ":")
env.Append(CPPPATH = PROC_LINK_INCLUDE + ":")

# debug infrastructure..
env.Append(CPPPATH = C_HOME + "/debugger/doval/include:" + C_HOME + "/debugger/doval/antlr3Cruntime/build/include:" + C_HOME + "/debugger/spi_common/include:" + C_HOME + "/debugger/gpb/include:" )





# SW aa2c execution: 
SW_LLIBS = 'AggregatorSimplified processor_link PipeHandler SockPipes pthread riffa'

SW_LLIBPATHS = ' /usr/local/lib/ ' +  C_HOME + '/common/lib ' + C_HOME + '/memory/lib ' + C_HOME + '/devices/lib ' + C_HOME + '/debugger/gpb/lib ' + C_HOME + '/debugger/spi_common/lib ' +  AHIR_LIBPATH + ' ' + FUNCTIONLIB_PATH + ' ' + AA_HOME + '/sys/chip/core/lib ' + DEBUG_UTILS_LIB + ' ' + DOVAL_HOME  + ' ' + ANTLR_PATH + ' ' +  MONITOR_LOGGER_LIB + ' ' + DEBUG_UTILS_LIB + ' '+ ' '  + CONSOLE_LIB + ' ' + BOOTMEM_LIB + ' ' + SYSMEM_LIB + ' ' + MEMARRAY_LIB + ' ' + PROC_LINK_LIB + ' ' + RIFFA_LIB + ' ' + AGGREGATOR_LIB
 
env.Program('./tb', './testbench.c', CCFLAGS=' -pthread -g -DUSE_PIPE_HANDLER ' ,LINKFLAGS='-g ', LIBS=Split(SW_LLIBS), LIBPATH=Split(SW_LLIBPATHS))
env.Program('./simple_tb', './simple_tb.c', CCFLAGS=' -pthread -g -DUSE_PIPE_HANDLER ' ,LINKFLAGS='-g ', LIBS=Split(SW_LLIBS), LIBPATH=Split(SW_LLIBPATHS))
env.Program('./simple_tb_2', './simple_tb_2.c', CCFLAGS=' -pthread -g -DUSE_PIPE_HANDLER ' ,LINKFLAGS='-g ', LIBS=Split(SW_LLIBS), LIBPATH=Split(SW_LLIBPATHS))
