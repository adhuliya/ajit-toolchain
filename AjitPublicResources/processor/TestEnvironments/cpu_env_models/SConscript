import os
import sys
env = Environment(ENV = {'PATH' : os.environ['PATH']})


#AHIR related
AHIR_RELEASE=os.environ['AHIR_RELEASE']
AHIR_INCLUDE=AHIR_RELEASE+"/include"
AHIR_LIBPATH=AHIR_RELEASE + "/lib"
FUNCTIONLIB_INCLUDE = AHIR_RELEASE + "/functionLibrary/include"
FUNCTIONLIB_PATH = AHIR_RELEASE + "/functionLibrary/lib"
AJIT_HOME=os.environ['AJIT_PROJECT_HOME']
C_HOME=AJIT_HOME + "/processor/C"
MONITOR_LOGGER_INCLUDE=C_HOME + "/monitorLogger/include"
AA_HOME=AJIT_HOME + "/processor/Aa_v2"
AAV3HOME=AJIT_HOME + "/processor/Aa_v3"
DOVAL_HOME=C_HOME+"/debugger/doval/lib"
env.Append(CPPPATH = AJIT_HOME + '/os/kernels/pico/include:')

ANTLR_PATH = C_HOME +  "/debugger/doval/antlr3Cruntime/build/lib"
is_64bits = sys.maxsize > 2**32
if (is_64bits) :
	ANTLR_PATH= ANTLR_PATH+"64 "
else :
	ANTLR_PATH= ANTLR_PATH+"32 "
env.Append(CPPPATH = AHIR_INCLUDE + ":" +  "./include:" + MONITOR_LOGGER_INCLUDE + ":")


DEBUG_UTILS_INCLUDE=AA_HOME + "/cpu/tests/environments/debug_utils/include"
DEBUG_UTILS_LIB=AA_HOME + "/cpu/tests/environments/debug_utils/lib"
env.Append(CPPPATH =DEBUG_UTILS_INCLUDE + ":")


env.Append(CPPPATH = AHIR_INCLUDE + ":" + "./include:")

#Libraries of components to make the environment
#
env.Append(CPPPATH = "./:" + C_HOME + "/common/include:" + C_HOME + "/cpu/include:" + C_HOME + "/cpu_interface/include:"+ C_HOME + "/cache/include:" + C_HOME + "/mmu/include:" + C_HOME + "/devices/include:" + C_HOME + "/memory/include:" + C_HOME + "/IO_drivers/include:" + C_HOME + "/debugger/doval/include:" + C_HOME + "/debugger/doval/antlr3Cruntime/build/include:" + C_HOME + "/debugger/spi_common/include:" + AAV3HOME + "sys/core/icache/include:" + AAV3HOME + "/sys/core/dcache/include:"  )



# create a library for the environment model V0
env.Library("./lib/cpu_only_env_model_v0", Glob ('./src/cpu_env_model_v0.c'), CCFLAGS=" -pthread -g")
VariantDir('objGnuPth', 'src', duplicate=0)
env.Library("./lib/cpu_only_env_model_v0_gnu_pth", Glob ('objGnuPth/cpu_env_model_v0.c'), CCFLAGS=" -g -DUSE_GNUPTH")


# create a library for the environment model V1
env.Library("./lib/cpu_only_env_model_v1", Glob ('./src/cpu_env_model_v1.c'), CCFLAGS=" -pthread -g")

# create a library for the environment model V2, which uses aa2c models of icache-v2, dcache-v2
# and will eventually use aa2c model of mmu-v2
env.Library("./lib/cpu_only_env_model_v2", Glob ('./src/cpu_env_model_v2.c'), CCFLAGS=" -pthread -g")

# create a library for the environment model V1 without peripherals
VariantDir('objEnvV1_without_peripherals', 'src', duplicate=0)
env.Library("./lib/cpu_only_env_model_v1_without_peripherals", Glob ('./objEnvV1_without_peripherals/cpu_env_model_v1.c'), CCFLAGS=" -DWITHOUT_PERIPHERALS -pthread -g")


# create a library for the environment model of proto_board
env.Library("./lib/env_model_proto_board", Glob ('./src/cpu_env_model_proto_board.c'), CCFLAGS=" -pthread -g -Dproto_board")

# create a library for the environment model of Aa_v3
env.Library("./lib/cpu_env_model_aa_v3", Glob ('./src/cpu_env_model_aa_v3.c'), CCFLAGS=" -pthread -g")


