
	model/
		Contains the SDHC model
			
	testapp/
		Contains the code for march test.

		- run compile.sh
				successfull compilation produces an executable named 'run'
		- execute ./run

NOTE: The setup expect Ahir environment variables.



NOTE:  for testing a byte write/read

	1. cpu is generating a write to byte_address.
	2. all writes generated by the cpu are 64-bit writes

	bottom-3-bits-of-byte-addr      bytemask     write-value
				        (bits)         (bytes)
		a000                     10000000       b0000000  	

                periph 
TB                  a000                 1000           b000

		a001			01000000       0b000000
                periph 
TB                  a000                 0100           0b00

		a010			00100000       00b00000
                periph 
TB                  a000                 0010           00b0

		a011			00010000       000b0000
                periph 
TB                  a000                 0001           000b

		a100			00001000       0000b000
                periph 
TB                  a100                 1000           b000

		a101			00000100       00000b00
                periph 
TB                  a100                 0100           0b00


		a110			00000010       000000b0
                periph 
TB                  a100                 0010           00b0

		a111			00000001       0000000b
                periph 
TB                  a100                 0001           000b




		Your device view from the cpu side
			 bytes

			 half-words
			 words
			 dwords


suggestion for testApp: 
	
		void writeSdhcReg (uint32_t byte_address_of_reg,
					uint8_t size_of_reg, uint8_t* bytes)
		{
			switch(size_of_reg) {
				case 1:
					writeSdhcByte (byte_address_of_reg, bytes[0]);
					break;
				case 2:
					if((byte_address_of_reg & 0x1) == 0) // check if the last bit is 0; even number; multiple of 2
						writeSdhcHalfWord (byte_address_of_reg, extHWord(bytes,0));
					else {
						writeSdhcByte (byte_address_of_reg & 0xfffffffe, bytes[0]); // make the last bit 0
						writeSdhcByte (byte_address_of_reg, bytes[1]);
					}
					break;
				case 4:
					if((byte_address_of_reg & 0x3) == 0) // check if last 2 bits are 0; multiple of 4
						writeSdhcWord (byte_address_of_reg, extWord(bytes,0)); // args (byte: array, 0: address to start from)
					else if((byte_address_of_reg & 0x1) == 0)
					{
						// split the write into two half-word writes
					}
					else	
					{
						// write byte
						// write half-word
						// write byte.
					}
					break;
				case 8:

				default:
					// error.
				break;
			}	
		}
