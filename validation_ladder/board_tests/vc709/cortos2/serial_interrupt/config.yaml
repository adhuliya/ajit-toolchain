# yaml configuration file for linker/loader of Co-RTOS
# yaml 10 minutes tutorial:
#   https://www.youtube.com/watch?v=cdLNKUoMc6c

Hardware:
  Processor:
    # Required: Number of cores and threads per core.
    Cores: 1
    ThreadsPerCore: 1
    ISA: 32 # 32/64 bit (Default: 32)

  Memory:
    MaxPhysicalAddrBitWidth: 36
    RAM:
      StartAddr: 0x0
      # EndAddr: ...
      # SizeInBytes: ...
      # SizeInKiloBytes: ...
      SizeInMegaBytes: 4
      Permissions: RWXC
    MMIO: # Memory Mapped IO
      StartAddr: 0xFFFF0000  # physical address
      EndAddr:   0xFFFFFFFF
      # SizeInBytes: ...
      # SizeInKiloBytes: ...
      # SizeInKiloBytes: 4
      Permissions: RW

  # see ./AjitPublicResources/tools/ajit_access_routines_mt/include/device_addresses.h
  Devices:
    - Name: Timer
      MemoryRegion:
        StartAddr: 0xFFFF3100 # physical address (in MMIO)
        SizeInBytes: 256 # 16x16
        Permissions: RW
      NamedRegisters:
        Control: 0xFFFF3100
    - Name: InterruptController
      MemoryRegion:
        StartAddr: 0xFFFF3000
        SizeInBytes: 32
        Permissions: RW
      NamedRegisters:
        Control: 0xFFFF3000
    - Name: Serial
      MemoryRegion:
        StartAddr: 0xFFFF3200
        SizeInBytes: 64
        Permissions: RW
      NamedRegisters:
        Control: 0xFFFF3200
        TX: 0xFFFF3204
        RX: 0xFFFF3208
    - Name: ScratchArea
      MemoryRegion:
        StartAddr: 0xFFFF2C00
        SizeInBytes: 1024
        Permissions: RW

Software:
  StartupFuncName : setup

  BuildAndExecute:
    # Optional: Specify the log level. Default is NONE.
    # ALL < TRACE < DEBUG < INFO < ERROR < CRITICAL < NONE
    LogLevel: DEBUG
    OptimizationLevel: 2 # i.e. O2 (Accepted values: 0, 1, 2)
    # specify argument string for C compiler......
    EnableSerial: No # Yes/No (Default: Yes)
    Debug: No # Yes/No (Default: No)
    FirstDebugPort: 8888
    BuildArgs: " -D CLK_FREQUENCY=80000000 -D USE_VMAP "

  # Required: Which functions execute on each ajit thread.
  ProgramThreads:
    - CortosInitCalls:
        - main

  # One can also specify an infinite loop on the function:
  #   CortosLoopCalls:
  #     - main1
      StackSize:
        SizeInKiloBytes: 8

  Interrupts: # hardware interrupts
    - Index: 12  # serial interrupt index
      Function: my_serial_interrupt_handler
