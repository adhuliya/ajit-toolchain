ABOUT:
	This folder contains the most current sources 
	for the Linux kernel ported to Ajit processor, 
	and the kernel configurations.


CONTENTS:
	Ajit_linux_3.16.1/ 	: Kernel source code for Ajit processor
				   created by modifying the linux kernel 3.16.1
	br2-dl/			: Contains the sources of al necessary packages for
				   Linux build
	busybox-1.22.1/		: Busybox source code with 'latency' issue fixed.
	Ajit_buildroot_configs/ : kernel & BR2 configurations for Ajit_linux
		board/overlay/	: contents that go into the initial filesystem

	Documentation/		: Steps for generating the kernel image,
				   running it on Ajit C model,
				   viewing, modifying and saving kernel configurations.

REFERENCE MATERIAL THAT CAN BE FETCHED FROM THE NET:
	linux-3.16.1.tar.xz	: the origin linux 3.16.1 kernel.

Build Instructions:
-------------------
	To build the OS, run

		./build.sh <DEFCONFIG>

		DEFCONFIG values
		    <1> legacy initramfs system config; no rootfs-tmpfs present [HAS THE LATENCY FIX]
		    <2> rootfs-tmpfs with satic-lib & static device list [HAS THE LATENCY FIX]
	
	Once successfully built, you should find the build output in the ./build directory

	Note: by default clock frequency is set for the c-model in the device-tree. 
		Refer "Ajit_device_tree/README" for knowing how to change it for FPGA.

--------------------------------------------------------------------------------------------------------
Ajit Linux System:
------------------
Overview
========

	Ajit Linux is based on Linux 3.16.1. Major additions for the Ajit platform are
		- Ajit_irq: The interrupt handling in lieu with Ajit interrupt handler. 
				Board-specific routines for handling timer and serial interrupts 
				and linking them with the kernel.
		- Ajit_serial: Driver for Ajit serial device
		- Ajit_srmmu: Ajit cache and tlb flush/read operations
		- A set of architecture specific code modifications in the 
			"Ajit_linux 3.16.1/arch/sparc" subdirectory

	For detailed overview, please refer "Documentation/README". Also, "AJITREFS.txt" 
	provide diff of the modifications. 

Adding files to Linux image
===========================

Buildroot, the build system we use, has a feature to add files on target filesystem.

	Following are the steps to be followed for creating an Ajit Linux image 
	that contain a custom program binary.
		- write your program and compile it using the cross-compile tools provided along with this project.
		- place your binary in "Ajit_buildroot_configs/board/rootfs/overlay/home"
		- make the binary an executable using "chmod" utility
		- Follow the build process as described in "Build Instructions" section

	The resulting image will have the custom binary in "/home" directory in the root filesystem. 
	Once the image in booted in your target, which will be the C-model or FPGA, navigate 
	to "/home" and run the binary as usual.

	An example program setup is provided at "example_program/hello_world".

	Note: If you choose to build with option <2>, then place the binary at "Ajit_buildroot_configs/board/overlay/rootfs/home"