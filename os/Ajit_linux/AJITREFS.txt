List of AJIT related code inserted into Kernel source.
--------------------------------------------------------

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
Ajit_linux_3.16.1/include/uapi/linux/serial_core.h:/* Ajit serial port*/
Ajit_linux_3.16.1/include/uapi/linux/serial_core.h:#define PORT_AJIT 109
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/init/main.c:	//		if(!(request_mem_region(0x3200, 16, "Ajit_serial")))
Ajit_linux_3.16.1/init/main.c:	//Ajit-test (1)
Ajit_linux_3.16.1/init/main.c:		prom_printf("\n AJIT FILESYSTEM TEST : Trying to open file %s ...",filename);
Ajit_linux_3.16.1/init/main.c:	//Ajit-test (2)
Ajit_linux_3.16.1/init/main.c:		prom_printf("\n AJIT CONSOLE TEST : Trying to open file %s ...",filename);
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h://Ajit_irq.h
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h:unsigned int Ajit_build_device_irq(struct platform_device *op,
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h:void Ajit_clear_clock_irq(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h:void  Ajit_init_timers(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h:void  Ajit_init_IRQ(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_irq.h:void Ajit_write_IRC_control_word(int value);
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/dma-mapping.h:	else if (sparc_cpu_model == Ajit)
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/cpu_type.h:  ajit	      = 0x07,
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/vaddrs.h:/*Modification for Ajit processor. We have to work with very low memory*/
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/machines.h:#define M_AJIT	      0x40
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h://Ajit_srmmu.h
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:#ifndef AJIT_SRMMU_H
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:#define AJIT_SRMMU_H
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_flush_icache_all(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_flush_dcache_all(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_flush_pcache_all(struct vm_area_struct *vma, unsigned long page);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_flush_cache_all(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_flush_tlb_all(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void Ajit_switch_mm(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void  poke_Ajit_srmmu(void);
Ajit_linux_3.16.1/arch/sparc/include/asm/Ajit_srmmu.h:void  init_Ajit(void);
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h://Ajit_romvec.h
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h:#ifndef AJIT_ROMVEC_H
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h:#define AJIT_ROMVEC_H
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h:#include "Ajit_nodeops.h"
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h:void update_Ajit_romvec(struct linux_romvec* rp) 
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_romvec.h:	rp->pv_nodeops = get_Ajit_nodeops(); // implemented using fdt routines
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h://Ajit_nodeops.h
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h:#ifndef AJIT_NODEOPS_H
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h:#define AJIT_NODEOPS_H
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h:struct Ajit_linux_nodeops {
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h://struct linux_nodeops* get_Ajit_nodeops() :
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h://written for Ajit using flattened device tree routines,
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.h:struct linux_nodeops* get_Ajit_nodeops(void);
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c://Ajit_nodeops.c
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:#include "Ajit_nodeops.h"
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:char * Ajit_name_string="name";
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:char   Ajit_name_buffer[500];
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:	char* name = Ajit_name_buffer;
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:			return Ajit_name_string;
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:struct Ajit_linux_nodeops {
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:struct Ajit_linux_nodeops Ajit_nodeops = {
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c://struct linux_nodeops* get_Ajit_nodeops() :
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c://written for Ajit using flattened device tree routines,
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:struct linux_nodeops* get_Ajit_nodeops(void)
Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_nodeops.c:	return (struct linux_nodeops*)&Ajit_nodeops;
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/Ajit_print_page_tables.h:void Ajit_print_page_tables(void)
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/Makefile:#Makefile for Ajit nodeops
Ajit_linux_3.16.1/arch/sparc/Ajit/Makefile:obj-y	+= fdt.o fdt_ro.o Ajit_nodeops.o 
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/kbuild:#Makefile for AJIT nodeops
Ajit_linux_3.16.1/arch/sparc/Ajit/kbuild:obj-y	+= fdt.o fdt_ro.o Ajit_nodeops.o 
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/Ajit/types.h:#ifndef AJIT_TYPES_H
Ajit_linux_3.16.1/arch/sparc/Ajit/types.h:#define AJIT_TYPES_H
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:#include <asm/Ajit_srmmu.h>
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	//Ajit specific:
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	else if(sparc_cpu_model == ajit)
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:		Ajit_switch_mm();
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	//Begin Ajit-specific test:
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	//	//End Ajit-specific test
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	/*Check for Ajit processor */
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:	if (sparc_cpu_model == ajit) {
Ajit_linux_3.16.1/arch/sparc/mm/srmmu.c:		init_Ajit();		
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c://Ajit cache and tlb flush/read operations
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:#include <asm/Ajit_srmmu.h>
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_icache_all(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_dcache_all(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_pcache_all(struct vm_area_struct *vma, unsigned long page)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	//		Ajit_flush_icache_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	//	Ajit_flush_dcache_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_cache_all(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_tlb_all(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_switch_mm(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_cache_mm(struct mm_struct *mm)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_cache_page(struct vm_area_struct *vma, unsigned long page)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	//Ajit_flush_pcache_all(vma, page);
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:inline void Ajit_flush_cache_range(struct vm_area_struct *vma,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_tlb_mm(struct mm_struct *mm)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_tlb_page(struct vm_area_struct *vma,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_tlb_range(struct vm_area_struct *vma,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_page_to_ram(unsigned long page)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_sig_insns(struct mm_struct *mm, unsigned long page)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static void Ajit_flush_page_for_dma(unsigned long page)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:void  poke_Ajit_srmmu(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	Ajit_flush_tlb_all();
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:static const struct sparc32_cachetlb_ops Ajit_ops = {
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.cache_all	= Ajit_flush_cache_all,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.cache_mm	= Ajit_flush_cache_mm,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.cache_page	= Ajit_flush_cache_page,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.cache_range	= Ajit_flush_cache_range,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.tlb_all	= Ajit_flush_tlb_all,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.tlb_mm		= Ajit_flush_tlb_mm,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.tlb_page	= Ajit_flush_tlb_page,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.tlb_range	= Ajit_flush_tlb_range,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.page_to_ram	= Ajit_flush_page_to_ram,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.sig_insns	= Ajit_flush_sig_insns,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	.page_for_dma	= Ajit_flush_page_for_dma,
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:void  init_Ajit(void)
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	srmmu_name = "Ajit";
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	sparc32_cachetlb_ops = &Ajit_ops;
Ajit_linux_3.16.1/arch/sparc/mm/Ajit_srmmu.c:	poke_srmmu = poke_Ajit_srmmu;

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
Ajit_linux_3.16.1/arch/sparc/mm/Makefile:obj-$(CONFIG_SPARC32)   += Ajit_srmmu.o
Ajit_linux_3.16.1/arch/sparc/Kbuild:obj-y += Ajit/
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/irq_32.c:#include <asm/Ajit_irq.h>
Ajit_linux_3.16.1/arch/sparc/kernel/irq_32.c:	case ajit :
Ajit_linux_3.16.1/arch/sparc/kernel/irq_32.c:		Ajit_init_IRQ();
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/ioport.c:#include <asm/Ajit_srmmu.h>
Ajit_linux_3.16.1/arch/sparc/kernel/ioport.c://Ajit: Ajit does not support snooping. Flush entire cache 
Ajit_linux_3.16.1/arch/sparc/kernel/ioport.c:	else if (sparc_cpu_model == ajit) 
Ajit_linux_3.16.1/arch/sparc/kernel/ioport.c:		Ajit_flush_dcache_all();
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- AJIT specific ------------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- end AJIT specific --------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- AJIT specific ------------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- end AJIT specific --------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- AJIT specific ------------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- end AJIT specific --------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- AJIT specific ------------------
Ajit_linux_3.16.1/arch/sparc/kernel/head_32.S:		!---- end AJIT specific --------------

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/vmlinux.lds:Change start address to 0 for AJIT processor 
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/kernel.h:void AJIT_init_IRQ(void);
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c://Ajit_irq.c
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static int Ajit_read_timer_register(int* paddr);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_write_timer_control_word(int value);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:void Ajit_write_IRC_control_word(int value);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static inline int Ajit_read_timer_register(int* paddr)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static unsigned int Ajit_startup_irq(struct irq_data *data)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_shutdown_irq(struct irq_data *data)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_mask_irq(struct irq_data *data)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_eoi_irq(struct irq_data *data)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_unmask_irq(struct irq_data *data)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static int Ajit_set_affinity(struct irq_data *data, const struct cpumask *dest,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static struct irq_chip Ajit_irq = {
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.name			= "Ajit",
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_startup		= Ajit_startup_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_shutdown		= Ajit_shutdown_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_mask		= Ajit_mask_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_unmask		= Ajit_unmask_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_eoi		= Ajit_eoi_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	.irq_set_affinity	= Ajit_set_affinity,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	node = of_find_node_by_name(rootnode, "ajit_interrupt_controller");
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!node) { prom_printf("\nERROR: While reading device tree, could not find node ajit_interrupt_controller.\n"); return; }
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!prop) { prom_printf("\nERROR: While reading device tree, could not find property reg in node ajit_interrupt_controller.\n"); return; }
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	node = of_find_node_by_name(rootnode, "ajit_timer");
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!node) { prom_printf("\nERROR: While reading device tree, could not find node ajit_timer.\n"); return; }
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!prop) { prom_printf("\nERROR: While reading device tree, could not find property reg in node ajit_timer.\n"); return; }
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!prop) { prom_printf("\nERROR: While reading device tree, could not find property interrupts in node ajit_timer.\n"); return; }
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!prop) { prom_printf("\nERROR: While reading device tree, could not find property tick-real-freq in node ajit_timer.\n"); TIMER_TICK_REAL_FREQUENCY=100;}
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	if (!prop) { prom_printf("\nERROR: While reading device tree, could not find property tick-virtual-freq in node ajit_timer.\n"); TIMER_TICK_VIRTUAL_FREQUENCY=100000;}
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static inline void Ajit_write_timer_control_word(int value)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:void Ajit_write_IRC_control_word(int value)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_load_profile_irq(int cpu, unsigned int limit)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	//prom_printf("\n------Ajit_load_profile_irq()");
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:unsigned int Ajit_build_device_irq_inner(unsigned int real_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:		irq_set_chip_and_handler_name(irq, &Ajit_irq,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:unsigned int Ajit_build_device_irq(struct platform_device *op, unsigned int real_irq)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	prom_printf("\n------Ajit_build_device_irq()");
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	return Ajit_build_device_irq_inner(real_irq, handle_simple_irq, "level", 0); 	
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void Ajit_clear_clock_irq(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_IRC_control_word(0x00);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_timer_control_word(0x00);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_IRC_control_word(0x01);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_timer_control_word(timer_control_word);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c://	TIMER_INTERNAL_TICK is defined in Ajit_Hardware_Configuration.h,
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void  Ajit_start_timer(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_timer_control_word(timer_control_word);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_IRC_control_word(IRC_control_word);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:void  Ajit_disable_timer(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_write_timer_control_word(timer_control_word);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void  Ajit_associate_timer_interrupt_with_handler(void)	
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	irq = Ajit_build_device_irq(NULL, timer_irq_level);
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static u32 Ajit_get_cycles_offset(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:static void  Ajit_init_timers(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	sparc_config.get_cycles_offset = Ajit_get_cycles_offset;
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_associate_timer_interrupt_with_handler();	
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	Ajit_start_timer();
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:void  Ajit_init_IRQ(void)
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	sparc_config.init_timers      = Ajit_init_timers;
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	sparc_config.build_device_irq = Ajit_build_device_irq;
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	sparc_config.clear_clock_irq  = Ajit_clear_clock_irq;
Ajit_linux_3.16.1/arch/sparc/kernel/Ajit_irq.c:	sparc_config.load_profile_irq = Ajit_load_profile_irq;
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/idprom.c:/*Ajit processor */
Ajit_linux_3.16.1/arch/sparc/kernel/idprom.c:{ .name = "Ajit Processor",  .id_machtype = (M_AJIT) },
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/auxio_32.c:	case ajit:
Ajit_linux_3.16.1/arch/sparc/kernel/auxio_32.c:	case ajit :
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/Makefile:EXTRA_CFLAGS := -I$(src)/../Ajit/
Ajit_linux_3.16.1/arch/sparc/kernel/Makefile:obj-$(CONFIG_SPARC32)   += sun4m_irq.o sun4d_irq.o Ajit_irq.o
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:	if (sparc_cpu_model == ajit) 
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:#include"Ajit_romvec.h"
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:	update_Ajit_romvec(rp); //update the nodeops field in the romvec
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:	sparc_cpu_model = ajit;
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:	prom_printf("\n  Hello World from Ajit processor ");
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:	case ajit:
Ajit_linux_3.16.1/arch/sparc/kernel/setup_32.c:		printk("Ajit\n");
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/arch/sparc/prom/bootstr_32.c:		//AJIT: Comment out the V0 stuff above, and
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/drivers/tty/Kconfig:	  This is an option applicable to Ajit processor.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:config SERIAL_AJIT_UART
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:	tristate "Ajit UART serial support"
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:	  This driver supports the Ajit UART device found on the Ajit Sparc V8
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:config SERIAL_AJIT_CONSOLE
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:	bool "Console on Ajit UART serial port"
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:	depends on SERIAL_AJIT_UART=y
Ajit_linux_3.16.1/drivers/tty/serial/Kconfig:	  If you would like to be able to use the Ajit UART serial port
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c://Ajit_serial.c
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c://Ajit serial driver (derived from uartlite.c)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#include <asm/Ajit_irq.h>
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_SERIAL_MAJOR	TTY_MAJOR //this is the standard value for ttyS0
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_SERIAL_MINORS	64	  //this is the standard value for ttyS0
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_UART_NR		1	  // only use one port 
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_SERIAL_NAME	"ttyS"
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_DRIVER_NAME	"Ajit_serial"
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#define AJIT_REGION		128	//give plenty of memory space
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int AJIT_SERIAL_IRQ = 0;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static u8 Ajit_in8(void __iomem *addr)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_out8(u8 val, void __iomem *addr)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static u32 Ajit_in32(void __iomem *addr)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_out32(u32 val, void __iomem *addr)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:struct Ajit_register_ops 
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct Ajit_register_ops Ajit_reg_ops = 
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.in8   = Ajit_in8,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.out8  = Ajit_out8,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.in32  = Ajit_in32,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.out32 = Ajit_out32,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	struct Ajit_register_ops *reg_ops = port->private_data;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	struct Ajit_register_ops *reg_ops = port->private_data;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	struct Ajit_register_ops *reg_ops = port->private_data;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	struct Ajit_register_ops *reg_ops = port->private_data;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_stop_Tx(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_stop_Rx(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_enable_Tx(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_enable_Rx(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static unsigned int Ajit_Tx_empty(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static unsigned int Ajit_Tx_empty_locking(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	ret = Ajit_Tx_empty(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_Tx_full(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	if(Ajit_Tx_empty(port)) return 0;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c://static int Ajit_Rx_full(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_Rx_empty(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_send_Tx(u8 c, struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	while(Ajit_Tx_full(port)) { }
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_enable_ms(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_Tx_chars(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//if(Ajit_Tx_full()) return 0;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_enable_Tx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		Ajit_send_Tx(port->x_char, port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		Ajit_send_Tx(xmit->buf[xmit->tail], port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		Ajit_stop_Tx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_start_Tx(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_Tx_chars(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_receive(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	if (Ajit_Rx_empty(port))
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		//prom_printf(" ... Ajit_Rx_empty()==1 . returning");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static irqreturn_t Ajit_isr(int irq, void *dev_id)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//prom_printf("\nAjit_isr()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_write_IRC_control_word(0x00);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		busy  = Ajit_receive(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//prom_printf("\nReturned from Ajit_receive(). n = %d",n);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_write_IRC_control_word(0x01);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static unsigned int Ajit_get_mctrl(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//prom_printf("\nAjit_get_mctrl()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_set_mctrl(struct uart_port *port, unsigned int mctrl)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//prom_printf("\nAjit_set_mctrl()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_break_ctl(struct uart_port *port, int break_state)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	//prom_printf("\nAjit_break_ctl()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_set_termios(struct uart_port *port,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_startup(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_startup()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	irq = Ajit_build_device_irq(NULL, port->irq);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\n Ajit_build_device_irq(NULL, %d) returned %d ",port->irq,irq);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	err = request_irq(irq, Ajit_isr, IRQF_SHARED, AJIT_DRIVER_NAME, port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_enable_Tx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_enable_Rx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_shutdown(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_shutdown()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_stop_Tx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_stop_Rx(port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static const char *Ajit_type(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	return port->type == PORT_AJIT ? AJIT_DRIVER_NAME : NULL;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_release_port(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_release_port()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	release_mem_region(port->mapbase, AJIT_REGION);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_request_port(struct uart_port *port)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_request_port: port=%p; port->mapbase=%llx\n",
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	if (!request_mem_region(port->mapbase, AJIT_REGION, AJIT_DRIVER_NAME)) 
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	port->membase = ioremap(port->mapbase, AJIT_REGION);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		release_mem_region(port->mapbase, AJIT_REGION);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	port->private_data = &Ajit_reg_ops;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_config_port(struct uart_port *port, int flags)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_config_port()");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	if (!Ajit_request_port(port))
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		port->type = PORT_AJIT;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int Ajit_verify_port(struct uart_port *port, struct serial_struct *ser)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c://If CONFIG_SERIAL_AJIT_CONSOLE is defined, the Ajit serial
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#ifdef CONFIG_SERIAL_AJIT_CONSOLE
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void Ajit_console_write(struct console *co, const char *s,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c://static int Ajit_console_setup(struct console *co, char *options)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct uart_driver Ajit_serial_driver;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct console Ajit_console = {
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.name	= AJIT_SERIAL_NAME,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.write	= Ajit_console_write,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.data	= &Ajit_serial_driver,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int __init Ajit_console_init(void)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	register_console(&Ajit_console);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:console_initcall(Ajit_console_init);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#endif // CONFIG_SERIAL_AJIT_CONSOLE 
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct uart_ops Ajit_serial_ops = {
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.tx_empty	= Ajit_Tx_empty_locking,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.set_mctrl	= Ajit_set_mctrl,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.get_mctrl	= Ajit_get_mctrl,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.stop_tx	= Ajit_stop_Tx,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.start_tx	= Ajit_start_Tx,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.stop_rx	= Ajit_stop_Rx,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.enable_ms	= Ajit_enable_ms,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.break_ctl	= Ajit_break_ctl,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.startup	= Ajit_startup,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.shutdown	= Ajit_shutdown,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.set_termios	= Ajit_set_termios,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.type		= Ajit_type,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.release_port	= Ajit_release_port,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.request_port	= Ajit_request_port,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.config_port	= Ajit_config_port,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.verify_port	= Ajit_verify_port,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct uart_port Ajit_port = {
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.ops	 = &Ajit_serial_ops,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static struct uart_driver Ajit_serial_driver = {
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.driver_name	= AJIT_DRIVER_NAME,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.dev_name	= AJIT_SERIAL_NAME,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.major		= AJIT_SERIAL_MAJOR,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.minor		= AJIT_SERIAL_MINORS,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.nr		= AJIT_UART_NR,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:#ifdef CONFIG_SERIAL_AJIT_CONSOLE
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	.cons		= &Ajit_console,
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	node = of_find_node_by_name(rootnode, "ajit_serial");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		prom_printf("\nERROR: While reading device tree, could not find node ajit_serial.\n");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		prom_printf("\nERROR: While reading device tree, could not find property reg in node ajit_serial.\n");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		prom_printf("\nERROR: While reading device tree, could not find property interrupts in node ajit_serial.\n");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	AJIT_SERIAL_IRQ = *(unsigned int *)prop->value;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_serial : found base register address = 0x%x",ADDR_SERIAL_REGISTER_BASE);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nAjit_serial : found interrupt number = 0x%x",AJIT_SERIAL_IRQ);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_port.mapbase = ADDR_SERIAL_REGISTER_BASE;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	Ajit_port.irq = AJIT_SERIAL_IRQ;
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static int __init Ajit_init(void)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nRegistering Ajit_serial driver");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	ret = uart_register_driver(&Ajit_serial_driver);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nIn Ajit_serial driver, registering port");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	ret = uart_add_one_port(&Ajit_serial_driver, &Ajit_port);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:		uart_unregister_driver(&Ajit_serial_driver);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nRegistration of Ajit_serial driver was successful\n");
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	prom_printf("\nRegistering Ajit_serial driver failed: err=%i", ret);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:static void __exit Ajit_exit(void)
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:	uart_unregister_driver(&Ajit_serial_driver);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:module_init(Ajit_init);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:module_exit(Ajit_exit);
Ajit_linux_3.16.1/drivers/tty/serial/Ajit_serial.c:MODULE_DESCRIPTION("Ajit serial driver (adapted from uartlite.c)");
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/drivers/tty/serial/Makefile:obj-$(CONFIG_SERIAL_AJIT_UART) += Ajit_serial.o
Ajit_linux_3.16.1/drivers/tty/Makefile:#Added for Ajit processor:
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/drivers/char/Makefile:obj-y				+= Ajit_simple_char.o
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/lib/vsprintf.c:	//ajit_putstring("In format_decode ");
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Ajit_linux_3.16.1/kernel/time/timekeeping.c:	//added to Ajit_linux for viewing timer interrupts
